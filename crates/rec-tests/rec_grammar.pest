

// An identifier.
identifier = @{  !("CONS") ~ (ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_" | "'" | "\"")*) }

// The grammar for first order terms identifier(t0, ..., tn)
term = {identifier ~ args?}
args = {"(" ~ term ~ ("," ~ term)*  ~ ")"}


rewrite_rule = {term ~ ("->" | "=") ~ term ~ ("if" ~ condition ~ ("and-if" ~ condition)*)?}
condition = {term ~ comparison ~ term }
comparison = {"=" | "<>"}

cons_decl = {identifier ~ ":" ~ identifier* ~ "->"  ~ identifier ~ NEWLINE}
opn_decl = {identifier ~ ":" ~ identifier* ~ "->"  ~ identifier ~ NEWLINE}
var_decl = {(identifier)* ~ ":"  ~ identifier}

header = {"REC-SPEC" ~ identifier ~ (":" ~ identifier+)? ~ NEWLINE+}
sorts = {"SORTS" ~ NEWLINE+ ~ (identifier*  ~ NEWLINE)? ~ NEWLINE*}
cons = {"CONS" ~ NEWLINE+ ~ (cons_decl | NEWLINE)*}
opns = {"OPNS" ~ NEWLINE+ ~ (opn_decl | NEWLINE)*}
vars = {"VARS"  ~ NEWLINE+ ~ (var_decl  | NEWLINE)*}
rules = {"RULES"  ~ NEWLINE+ ~ (((rewrite_rule ~ NEWLINE)  | NEWLINE))*}
eval = {"EVAL"  ~ NEWLINE+ ~ ((term  ~ NEWLINE) | NEWLINE)*}

/// The actual REC specification
rec_spec = {SOI ~ NEWLINE* ~ header ~ sorts ~ cons ~ opns ~ vars ~ rules ~ eval? ~ "END-SPEC" ~ NEWLINE* ~ EOI}

// A single rewrite rule
single_rewrite_rule = {SOI ~ rewrite_rule ~ EOI}

// A single term.
single_term = {SOI ~ term ~ EOI}


COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)*}

WHITESPACE = _{ " " | "\t" }